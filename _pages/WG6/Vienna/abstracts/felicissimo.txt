A Logical Framework for Computational Type Theories

Logical frameworks are an important tool to unify the study and implementation of proof systems. Those designed for defining (dependent) type theories have to accommodate an extensible definitional equality, however many of them are too permissive with the accepted equalities, making them hard to implement. In this talk I will introduce CompLF (Computational Logical Framework), a framework suitable for defining computational type theories, that is, those whose definitional equality is purely generated by rewrite rules. A core design idea is that of dependency erasure, which allows to link the arity of syntactic constructors with their typing --- for instance, the typing of lam is given by {A : Ty}{B : Tm A -> Ty}(t : (x : Tm A) -> Tm B(x)) -> Tm Pi(A,x.B(x)), which is erased into the arity (tm -> tm) -> tm. This example also shows a major feature of CompLF, which are the arguments between brackets, called erased arguments. These are part of the symbol's typing rule but omitted from the syntax --- if you write lam x. t instead of lam(A, x. B, x. t), then you already know them. CompLF is designed to be implementable but erased arguments can very easily make typechecking undecidable. My second contribution is a theory-agnostic bidirectional checking algorithm, which can be instantiated by giving modes to a signature in such a way that a mode-correctness criterion is satisfied.
