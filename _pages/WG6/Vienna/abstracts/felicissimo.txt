A Logical Framework for Computational Theories with Minimal Syntax and Bidirectional Typing

Logical frameworks are important tools for unifying the study and implementation of type theories. In this talk I will introduce CompLF, a logical framework for computational theories. It aims at representing the syntax of theories in a faithful way, and one of the ways it achieves this is by supporting erased arguments. These are arguments that are part of the typing rules but are omitted from the syntax, allowing for example to write abs(x. t) instead of abs(A, x. B, x. t). Erased arguments enable us to define the syntax that we are used to, but make typechecking a non-trivial and in general undecidable task.

To address this problem, I propose a bidirectional typing algorithm for CompLF. Bidirectional typing complements erased arguments very well, as it allows to specify the flow of typing information in a way that makes clear the redundancy of such arguments. The main distinguishing feature of the algorithm is that it is theory agnostic: it can be instantiated with multiple theories, and by varying the amount of annotations in the syntax we also vary its amount of completeness.

Finally, CompLF is designed to be not only a theoretical tool but also a practical one: it has been implemented and can be found at https://github.com/thiagofelicissimo/complf.
